from unittest import TestCase
from useful_tools.property_factory import PropertyFactory

class TestPropertyFactory(TestCase):
    def test_property_factory(self):
        def my_decorator(func):
            def wrapper(self, *args, **kwargs):
                type(self).my_property = PropertyFactory(lambda self: self.some_dictionary.get("my_property"))
                return func(self, *args, **kwargs)
            return wrapper

        class MyClass:
            @my_decorator
            def my_decorated_method(self):
                self.some_dictionary = {"my_property": "Hello World"}
            # my_property will be defined on this instance when my_decorated_method is called
            
        my_instance = MyClass()
        my_instance.my_decorated_method()
        self.assertEqual("Hello World", my_instance.my_property)


class TestPropertyFactoryInACompletelyUselessWay(TestCase):
    # tests generated by copilot...

    def test_property_factory(self):
        # Define a class that uses the PropertyFactory
        class MyClass:
            @PropertyFactory
            def my_property(self):
                return "my_property_value"

        # Create an instance of MyClass
        my_instance = MyClass()

        # Test that the property returns the correct value
        self.assertEqual(my_instance.my_property, "my_property_value")

    def test_property_factory_with_multiple_instances(self):
        # Define a class that uses the PropertyFactory
        class MyClass:
            @PropertyFactory
            def my_property(self):
                return id(self)

        # Create multiple instances of MyClass
        instance1 = MyClass()
        instance2 = MyClass()

        # Test that each instance has a unique property value
        self.assertNotEqual(instance1.my_property, instance2.my_property)

    def test_property_factory_with_class_access(self):
        # Define a class that uses the PropertyFactory
        class MyClass:
            @PropertyFactory
            def my_property(self):
                return "my_property_value"

        # Test that accessing the property from the class returns the PropertyFactory instance
        self.assertIsInstance(MyClass.my_property, PropertyFactory)
